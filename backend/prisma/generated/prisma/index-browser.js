
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BaseCompetitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  sportId: 'sportId',
  note: 'note',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BaseCountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  code: 'code',
  note: 'note',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BaseFieldScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  isActive: 'isActive',
  sportIds: 'sportIds',
  countryId: 'countryId',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BaseGroupLevelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  minAge: 'minAge',
  maxAge: 'maxAge',
  skillLevel: 'skillLevel',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BaseSportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameEventScalarFieldEnum = {
  id: 'id',
  sportId: 'sportId',
  competitionId: 'competitionId',
  eventDate: 'eventDate',
  venue: 'venue',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameMatcheScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  homeTeamId: 'homeTeamId',
  awayTeamId: 'awayTeamId',
  homeTeamScore: 'homeTeamScore',
  awayTeamScore: 'awayTeamScore',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchEventScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  teamId: 'teamId',
  eventType: 'eventType',
  minute: 'minute',
  second: 'second',
  note: 'note',
  eventData: 'eventData',
  fieldX: 'fieldX',
  fieldY: 'fieldY',
  isConfirmed: 'isConfirmed',
  createdBy: 'createdBy',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchLineupScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  teamId: 'teamId',
  formation: 'formation',
  lineupData: 'lineupData',
  announcedAt: 'announcedAt',
  isConfirmed: 'isConfirmed',
  createdBy: 'createdBy',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchMediaScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  mediaType: 'mediaType',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  note: 'note',
  category: 'category',
  isPublic: 'isPublic',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchRosterScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  teamId: 'teamId',
  isStarting: 'isStarting',
  isSubstitute: 'isSubstitute',
  position: 'position',
  jerseyNumber: 'jerseyNumber',
  substitutionInMinute: 'substitutionInMinute',
  substitutionOutMinute: 'substitutionOutMinute',
  substitutionReason: 'substitutionReason',
  minutesPlayed: 'minutesPlayed',
  status: 'status',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchStatisticScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  teamId: 'teamId',
  minutesPlayed: 'minutesPlayed',
  goals: 'goals',
  assists: 'assists',
  shots: 'shots',
  shots_on_target: 'shots_on_target',
  passes: 'passes',
  passesCompleted: 'passesCompleted',
  passAccuracy: 'passAccuracy',
  tackles: 'tackles',
  interceptions: 'interceptions',
  clearances: 'clearances',
  blocks: 'blocks',
  yellowCards: 'yellowCards',
  redCards: 'redCards',
  foulsCommitted: 'foulsCommitted',
  foulsWon: 'foulsWon',
  saves: 'saves',
  goalsConceded: 'goalsConceded',
  cleanSheets: 'cleanSheets',
  rating: 'rating',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberClubAdminScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  clubId: 'clubId',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  status: 'status',
  bio: 'bio',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberCoacheScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  licenseNumber: 'licenseNumber',
  certification: 'certification',
  specialization: 'specialization',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  status: 'status',
  bio: 'bio',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberParentScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  status: 'status',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberPersonScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  dob: 'dob',
  gender: 'gender',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  countryId: 'countryId',
  photoPath: 'photoPath',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberPlayerScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  height: 'height',
  weight: 'weight',
  preferredFoot: 'preferredFoot',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  status: 'status',
  bio: 'bio',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberRefereeScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  licenseNumber: 'licenseNumber',
  licenseLevel: 'licenseLevel',
  certification: 'certification',
  refereeType: 'refereeType',
  specialization: 'specialization',
  languages: 'languages',
  matchFee: 'matchFee',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  status: 'status',
  bio: 'bio',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberSponsorScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  website: 'website',
  sponsorLevel: 'sponsorLevel',
  sponsorshipAmount: 'sponsorshipAmount',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  benefits: 'benefits',
  logoPath: 'logoPath',
  status: 'status',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberTeamManagerScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  appointedDate: 'appointedDate',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  status: 'status',
  bio: 'bio',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrgClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  foundedDate: 'foundedDate',
  address: 'address',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  website: 'website',
  status: 'status',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrgLeagueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  gameModeId: 'gameModeId',
  groupLevelId: 'groupLevelId',
  season: 'season',
  startDate: 'startDate',
  endDate: 'endDate',
  registrationDeadline: 'registrationDeadline',
  maxTeams: 'maxTeams',
  entryFee: 'entryFee',
  subscribeEmail: 'subscribeEmail',
  rules: 'rules',
  status: 'status',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrgTeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  clubId: 'clubId',
  sportId: 'sportId',
  leagueId: 'leagueId',
  ageGroup: 'ageGroup',
  gender: 'gender',
  skillLevel: 'skillLevel',
  color1: 'color1',
  color2: 'color2',
  maxPlayers: 'maxPlayers',
  status: 'status',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanGameScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  gameName: 'gameName',
  homeTeamId: 'homeTeamId',
  awayTeamId: 'awayTeamId',
  startDatetime: 'startDatetime',
  endDatetime: 'endDatetime',
  duration: 'duration',
  uniform: 'uniform',
  locationId: 'locationId',
  isScrimmage: 'isScrimmage',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanMeetingScalarFieldEnum = {
  id: 'id',
  meetingCategory: 'meetingCategory',
  teamId: 'teamId',
  startDatetime: 'startDatetime',
  endDatetime: 'endDatetime',
  title: 'title',
  content: 'content',
  locationId: 'locationId',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanTrainingScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  startDatetime: 'startDatetime',
  endDatetime: 'endDatetime',
  trainingContent: 'trainingContent',
  isAllMembers: 'isAllMembers',
  locationId: 'locationId',
  recurringType: 'recurringType',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelClubClubAdminScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  adminId: 'adminId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  status: 'status',
  role: 'role',
  salary: 'salary',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelCompetitionGroupLevelScalarFieldEnum = {
  id: 'id',
  competitionId: 'competitionId',
  groupLevelId: 'groupLevelId',
  isPrimary: 'isPrimary',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelFieldSportScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  sportId: 'sportId',
  isPrimary: 'isPrimary',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelMatchRefereeScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  refereeId: 'refereeId',
  assignedAt: 'assignedAt',
  confirmedAt: 'confirmedAt',
  cancelledAt: 'cancelledAt',
  status: 'status',
  matchFee: 'matchFee',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelPlayerParentScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  parentId: 'parentId',
  assignedAt: 'assignedAt',
  removedAt: 'removedAt',
  relationship: 'relationship',
  isPrimaryContact: 'isPrimaryContact',
  canPickup: 'canPickup',
  receivesNotifications: 'receivesNotifications',
  occupation: 'occupation',
  employer: 'employer',
  workPhone: 'workPhone',
  status: 'status',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelSponsorClubScalarFieldEnum = {
  id: 'id',
  sponsorId: 'sponsorId',
  clubId: 'clubId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  sponsorshipAmount: 'sponsorshipAmount',
  benefits: 'benefits',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelSponsorLeagueScalarFieldEnum = {
  id: 'id',
  sponsorId: 'sponsorId',
  leagueId: 'leagueId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  sponsorshipAmount: 'sponsorshipAmount',
  benefits: 'benefits',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelSponsorTeamScalarFieldEnum = {
  id: 'id',
  sponsorId: 'sponsorId',
  teamId: 'teamId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  sponsorshipAmount: 'sponsorshipAmount',
  benefits: 'benefits',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelTeamCoachScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  coachId: 'coachId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  status: 'status',
  coachTypeId: 'coachTypeId',
  salary: 'salary',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  responsibilities: 'responsibilities',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelTeamPlayerScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  playerId: 'playerId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  status: 'status',
  jerseyNumber: 'jerseyNumber',
  positionId: 'positionId',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelTeamTeamManagerScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  managerId: 'managerId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  status: 'status',
  managerTypeId: 'managerTypeId',
  salary: 'salary',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  responsibilities: 'responsibilities',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportCoachTypeScalarFieldEnum = {
  id: 'id',
  sportId: 'sportId',
  name: 'name',
  abbr: 'abbr',
  color: 'color',
  note: 'note',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportEventTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  category: 'category',
  evaluationMetric: 'evaluationMetric',
  code: 'code',
  sportId: 'sportId',
  isVisible: 'isVisible',
  note: 'note',
  ord: 'ord',
  score: 'score',
  slot: 'slot',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportGamePeriodScalarFieldEnum = {
  id: 'id',
  sportId: 'sportId',
  name: 'name',
  ord: 'ord',
  duration: 'duration',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportManagerTypeScalarFieldEnum = {
  id: 'id',
  sportId: 'sportId',
  name: 'name',
  abbr: 'abbr',
  color: 'color',
  note: 'note',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportPlayerPositionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbr: 'abbr',
  note: 'note',
  sportId: 'sportId',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SportRefereeTypeScalarFieldEnum = {
  id: 'id',
  sportId: 'sportId',
  name: 'name',
  abbr: 'abbr',
  color: 'color',
  note: 'note',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubFeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  note: 'note',
  category: 'category',
  icon: 'icon',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubForTeamScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  planId: 'planId',
  status: 'status',
  startedAt: 'startedAt',
  expiresAt: 'expiresAt',
  autoRenew: 'autoRenew',
  paymentMethod: 'paymentMethod',
  lastPaymentAt: 'lastPaymentAt',
  nextPaymentAt: 'nextPaymentAt',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubForUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  status: 'status',
  startedAt: 'startedAt',
  expiresAt: 'expiresAt',
  autoRenew: 'autoRenew',
  paymentMethod: 'paymentMethod',
  lastPaymentAt: 'lastPaymentAt',
  nextPaymentAt: 'nextPaymentAt',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  planType: 'planType',
  price: 'price',
  isPopular: 'isPopular',
  note: 'note',
  features: 'features',
  maxTeams: 'maxTeams',
  maxPlayers: 'maxPlayers',
  maxCoaches: 'maxCoaches',
  maxReferees: 'maxReferees',
  storageLimitGb: 'storageLimitGb',
  isActive: 'isActive',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubPlanFeatureScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureId: 'featureId',
  isIncluded: 'isIncluded',
  notes: 'notes',
  ord: 'ord',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SysUserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  emailVerifiedAt: 'emailVerifiedAt',
  password: 'password',
  status: 'status',
  personId: 'personId',
  rememberToken: 'rememberToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  BaseCompetition: 'BaseCompetition',
  BaseCountry: 'BaseCountry',
  BaseField: 'BaseField',
  BaseGroupLevel: 'BaseGroupLevel',
  BaseSport: 'BaseSport',
  GameEvent: 'GameEvent',
  GameMatche: 'GameMatche',
  MatchEvent: 'MatchEvent',
  MatchLineup: 'MatchLineup',
  MatchMedia: 'MatchMedia',
  MatchRoster: 'MatchRoster',
  MatchStatistic: 'MatchStatistic',
  MemberClubAdmin: 'MemberClubAdmin',
  MemberCoache: 'MemberCoache',
  MemberParent: 'MemberParent',
  MemberPerson: 'MemberPerson',
  MemberPlayer: 'MemberPlayer',
  MemberReferee: 'MemberReferee',
  MemberSponsor: 'MemberSponsor',
  MemberTeamManager: 'MemberTeamManager',
  OrgClub: 'OrgClub',
  OrgLeague: 'OrgLeague',
  OrgTeam: 'OrgTeam',
  PlanGame: 'PlanGame',
  PlanMeeting: 'PlanMeeting',
  PlanTraining: 'PlanTraining',
  RelClubClubAdmin: 'RelClubClubAdmin',
  RelCompetitionGroupLevel: 'RelCompetitionGroupLevel',
  RelFieldSport: 'RelFieldSport',
  RelMatchReferee: 'RelMatchReferee',
  RelPlayerParent: 'RelPlayerParent',
  RelSponsorClub: 'RelSponsorClub',
  RelSponsorLeague: 'RelSponsorLeague',
  RelSponsorTeam: 'RelSponsorTeam',
  RelTeamCoach: 'RelTeamCoach',
  RelTeamPlayer: 'RelTeamPlayer',
  RelTeamTeamManager: 'RelTeamTeamManager',
  SportCoachType: 'SportCoachType',
  SportEventType: 'SportEventType',
  SportGamePeriod: 'SportGamePeriod',
  SportManagerType: 'SportManagerType',
  SportPlayerPosition: 'SportPlayerPosition',
  SportRefereeType: 'SportRefereeType',
  SubFeature: 'SubFeature',
  SubForTeam: 'SubForTeam',
  SubForUser: 'SubForUser',
  SubPlan: 'SubPlan',
  SubPlanFeature: 'SubPlanFeature',
  SysUser: 'SysUser'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
